service: () -> {
    createMilestone: (record {required_funding:nat64; description:text; deadline:text; proposal_id:text}) -> (variant {Ok:record {id:text; status:text; required_funding:nat64; description:text; deadline:text; proofs:vec text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createProposal: (record {title:text; description:text; funding_target:nat64; researcherId:text; methodology:text}) -> (variant {Ok:record {id:text; title:text; reviews:vec text; current_funding:nat64; description:text; stage:text; funding_target:nat64; researcherId:text; methodology:text; milestones:vec text; timeline:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createResearcher: (record {name:text; email:text; address:text; phone:text}) -> (variant {Ok:record {id:text; contributions:vec text; owner:principal; total_points:nat64; name:text; badges:vec text; email:text; achievements:vec text; address:text; phone:text; reputation_score:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    fundProposal: (record {proposal_id:text; funding_amount:nat64}) -> (variant {Ok:record {id:text; title:text; reviews:vec text; current_funding:nat64; description:text; stage:text; funding_target:nat64; researcherId:text; methodology:text; milestones:vec text; timeline:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    getAllResearchers: () -> (variant {Ok:vec record {id:text; contributions:vec text; owner:principal; total_points:nat64; name:text; badges:vec text; email:text; achievements:vec text; address:text; phone:text; reputation_score:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getAllproposals: () -> (variant {Ok:vec record {id:text; title:text; reviews:vec text; current_funding:nat64; description:text; stage:text; funding_target:nat64; researcherId:text; methodology:text; milestones:vec text; timeline:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getProposalById: (text) -> (variant {Ok:record {id:text; title:text; reviews:vec text; current_funding:nat64; description:text; stage:text; funding_target:nat64; researcherId:text; methodology:text; milestones:vec text; timeline:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getProposalsByResearcherId: (text) -> (variant {Ok:vec record {id:text; title:text; reviews:vec text; current_funding:nat64; description:text; stage:text; funding_target:nat64; researcherId:text; methodology:text; milestones:vec text; timeline:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getResearcherById: (text) -> (variant {Ok:record {id:text; contributions:vec text; owner:principal; total_points:nat64; name:text; badges:vec text; email:text; achievements:vec text; address:text; phone:text; reputation_score:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getResearcherByOwner: () -> (variant {Ok:record {id:text; contributions:vec text; owner:principal; total_points:nat64; name:text; badges:vec text; email:text; achievements:vec text; address:text; phone:text; reputation_score:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    submitProof: (record {methodology_hash:text; milestone_id:text; results_hash:text}) -> (variant {Ok:record {id:text; status:text; methodology_hash:text; results_hash:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    submitReview: (record {score:nat64; proposal_id:text; comments:text; stake_amount:nat64}) -> (variant {Ok:record {id:text; verified:bool; score:nat64; comments:text; reviewer:principal; stake_amount:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    verifyMilestone: (record {proposal_id:text; milestone_id:text}) -> (variant {Ok:record {id:text; status:text; required_funding:nat64; description:text; deadline:text; proofs:vec text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
}
